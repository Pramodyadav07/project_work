Spotify nowpipe

// Create Album data table
CREATE OR REPLACE TABLE SPOTIFY.PUBLIC.tblalbum (
  album_id VARCHAR(100),
  name VARCHAR(100),
  release_date DATE,
  total_tracks INT,
  url VARCHAR(100)
  )
// Create Schema for file format object    
CREATE OR REPLACE SCHEMA SPOTIFY.file_formats

// Create file format object
CREATE OR REPLACE file format SPOTIFY.file_formats.csv_fileformat
    type = csv
    field_delimiter = ','
    skip_header = 1
    null_if = ('NULL','null')
    empty_field_as_null = TRUE;

 // Create storage integration using AWS ARN and Extenal ID in policy
create or replace storage integration s3_init
  TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = S3
  ENABLED = TRUE 
  STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::643060661744:role/snowfakes-s3-connection'
  STORAGE_ALLOWED_LOCATIONS = ('s3://spotify-etl-spy')
   COMMENT = 'Creating connection to S3' 

// Get external ID and Aws ARN ID to create policy
DESC integration s3_init;


// Create Schema for external stage object    
CREATE OR REPLACE SCHEMA SPOTIFY.external_stages   
    
 // Create stage object with integration object & file format object
CREATE OR REPLACE stage SPOTIFY.external_stages.csv_folder
    URL = 's3://spotify-etl-spy/transformed-data/'
    STORAGE_INTEGRATION = s3_init
    FILE_FORMAT = SPOTIFY.file_formats.csv_fileformat
   

 // Create stage object with integration object & file format object
LIST @SPOTIFY.external_stages.csv_folder  


// Create schema to keep things organized
CREATE OR REPLACE SCHEMA SPOTIFY.pipes

// Define pipe
CREATE OR REPLACE pipe SPOTIFY.pipes.album_pipe
auto_ingest = TRUE
AS
COPY INTO SPOTIFY.PUBLIC.tblalbum
FROM @SPOTIFY.external_stages.csv_folder  

// Describe pipe get the notification_channel and copy it for S3 event 
DESC pipe SPOTIFY.pipes.album_pipe
    
-- s3 event -> all notification -> sql -> paste value of channel

select* from  SPOTIFY.PUBLIC.tblalbum

// Create Atrist data table
CREATE OR REPLACE TABLE SPOTIFY.PUBLIC.tblartist (
  artist_id VARCHAR(100),
  artist_name VARCHAR(100),
  url VARCHAR(100)
  )

CREATE OR REPLACE stage SPOTIFY.external_stages.csv_folder
    URL = 's3://spotify-etl-spy/transformed-data/'
    STORAGE_INTEGRATION = s3_init
    FILE_FORMAT = SPOTIFY.file_formats.csv_fileformat

CREATE OR REPLACE pipe SPOTIFY.pipes.artist_pipe
auto_ingest = TRUE
AS
COPY INTO SPOTIFY.PUBLIC.tblartist
FROM @SPOTIFY.external_stages.csv_folder

DESC pipe SPOTIFY.pipes.artist_pipe

// Create songs data table
CREATE OR REPLACE TABLE SPOTIFY.PUBLIC.tblsongs (
  song_id VARCHAR(100),
  song_name VARCHAR(100),
  duration_ms INT,
  url VARCHAR(100),
  popularity INT,
  song_added DATE,
  album_id VARCHAR(100),
  artist_id VARCHAR(100)
  )
  
CREATE OR REPLACE pipe SPOTIFY.pipes.songs_pipe
auto_ingest = TRUE
AS
COPY INTO SPOTIFY.PUBLIC.tblsongs
FROM @SPOTIFY.external_stages.csv_folder

DESC pipe SPOTIFY.pipes.songs_pipe

select* from  SPOTIFY.PUBLIC.tblalbum
select* from  SPOTIFY.PUBLIC.tblsongs
select* from  SPOTIFY.PUBLIC.tblartist

#truncate  SPOTIFY.PUBLIC.tblartist
#truncate  SPOTIFY.PUBLIC.tblsongs
#truncate  SPOTIFY.PUBLIC.tblalbum